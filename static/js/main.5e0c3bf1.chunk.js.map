{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","letraActual","clickAction","bind","assertThisInitialized","playSound","keyAction","document","addEventListener","removeEventListener","event","key","toUpperCase","find","i","target","id","value","console","error","_this2","log","setState","setTimeout","audioElement","getElementById","currentTime","play","react_default","a","createElement","className","onClick","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAiIeA,qBA5HX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,GACNC,YAAa,IAEjBT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACnBA,EAAKa,UAAYb,EAAKa,UAAUF,KAAfV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACjBA,EAAKc,UAAYd,EAAKc,UAAUH,KAAfV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARHA,mFAYde,SAASC,iBAAiB,UAAWb,KAAKW,0DAI1CC,SAASE,oBAAoB,UAAWd,KAAKW,6CAGvCI,GACN,IACIV,EAAO,GAEX,OAAQU,EAAMC,IAAIC,eACd,IAAK,IACDZ,EAAO,UACP,MACJ,IAAK,IACDA,EAAO,UACP,MACJ,IAAK,IACDA,EAAO,UACP,MACJ,IAAK,IACDA,EAAO,UACP,MACJ,IAAK,IACDA,EAAO,OACP,MACJ,IAAK,IACDA,EAAO,SACP,MACJ,IAAK,IACDA,EAAO,aACP,MACJ,IAAK,IACDA,EAAO,OACP,MACJ,IAAK,IACDA,EAAO,WA7BM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAmC9Ca,KAAK,SAAAC,GAAC,OAAIA,IAAMJ,EAAMC,IAAIC,gBACtCjB,KAAKO,YAAY,CACba,OAAQ,CACJC,GAAIhB,EACJiB,MAAOP,EAAMC,IAAIC,iBAIzBM,QAAQC,MAAM,aAAgBT,EAAMC,IAAM,qFAIrCD,GAAM,IAAAU,EAAAzB,KACfuB,QAAQG,IAAIX,EAAMK,OAAOE,OACzBtB,KAAK2B,SAAS,CACVtB,KAAMU,EAAMK,OAAOC,GACnBf,YAAaS,EAAMK,OAAOE,QAE9BM,WAAW,WAAOH,EAAKf,aAAe,uCAItC,IAAImB,EAAejB,SAASkB,eAAe9B,KAAKI,MAAME,aACtDuB,EAAaE,YAAc,EAC3BF,EAAaG,wCAIjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKd,GAAG,gBACJY,EAAAC,EAAAC,cAAA,OAAKd,GAAG,WACHrB,KAAKI,MAAMC,MAEhB4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAQd,GAAG,UAAUe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA3E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,2DAA2DF,UAAU,OAAOf,GAAG,OAE9FY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,UAAUe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA3E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,2DAA2DF,UAAU,OAAOf,GAAG,OAE9FY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,UAAUe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA3E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,2DAA2DF,UAAU,OAAOf,GAAG,OAE9FY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,UAAUe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA3E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,6DAA6DF,UAAU,OAAOf,GAAG,OAEhGY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,OAAOe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAAxE,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,2DAA2DF,UAAU,OAAOf,GAAG,OAE9FY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,SAASe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA1E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,yDAAyDF,UAAU,OAAOf,GAAG,OAE5FY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,aAAae,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA9E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,6DAA6DF,UAAU,OAAOf,GAAG,OAEhGY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,OAAOe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAAxE,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,6DAA6DF,UAAU,OAAOf,GAAG,OAEhGY,EAAAC,EAAAC,cAAA,UAAQd,GAAG,WAAWe,UAAU,WAAWC,QAASrC,KAAKO,YAAae,MAAM,KAA5E,IACIW,EAAAC,EAAAC,cAAA,SAAOG,IAAI,yDAAyDF,UAAU,OAAOf,GAAG,iBArH1FkB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASnC,SAASkB,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5e0c3bf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            text: '',\n            letraActual: ''\n        }\n        this.clickAction = this.clickAction.bind(this);\n        this.playSound = this.playSound.bind(this);\n        this.keyAction = this.keyAction.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.keyAction);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.keyAction);\n    }\n\n    keyAction(event) {\n        const validLetters = [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"];\n        let text = '';\n\n        switch (event.key.toUpperCase()){\n            case \"Q\":\n                text = \"heater1\";\n                break;\n            case \"W\":\n                text = \"heater2\";\n                break;\n            case \"E\":\n                text = \"heater3\";\n                break;\n            case \"A\":\n                text = \"heater4\";\n                break;\n            case \"S\":\n                text = \"clap\";\n                break;\n            case \"D\":\n                text = \"openHH\";\n                break;\n            case \"Z\":\n                text = \"kickAndHat\";\n                break;\n            case \"X\":\n                text = \"kick\";\n                break;\n            case \"C\":\n                text = \"closedHH\";\n                break;\n            default:\n                break;\n        }\n\n        if(validLetters.find(i => i === event.key.toUpperCase())){\n            this.clickAction({\n                target: {\n                    id: text,\n                    value: event.key.toUpperCase()\n                }\n            });\n        } else {\n            console.error(\"La tecla \\\"\" + event.key + \"\\\" no corresponde con ninguna de las opciones.\")\n        }\n    }\n\n    clickAction (event){\n        console.log(event.target.value)\n        this.setState({\n            text: event.target.id,\n            letraActual: event.target.value\n        });\n        setTimeout(() => {this.playSound();}, 1);\n    }\n\n    playSound(){\n        let audioElement = document.getElementById(this.state.letraActual);\n        audioElement.currentTime = 0;\n        audioElement.play();\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"drum-machine\">\n            <div id=\"display\">\n                {this.state.text}\n            </div>\n            <div className=\"cuadro\">\n                <button id=\"heater1\" className=\"drum-pad\" onClick={this.clickAction} value=\"Q\">Q\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" className=\"clip\" id=\"Q\"></audio>\n                </button>\n                <button id=\"heater2\" className=\"drum-pad\" onClick={this.clickAction} value=\"W\">W\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" className=\"clip\" id=\"W\"></audio>\n                </button>\n                <button id=\"heater3\" className=\"drum-pad\" onClick={this.clickAction} value=\"E\">E\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" className=\"clip\" id=\"E\"></audio>\n                </button>\n                <button id=\"heater4\" className=\"drum-pad\" onClick={this.clickAction} value=\"A\">A\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" className=\"clip\" id=\"A\"></audio>\n                </button>\n                <button id=\"clap\" className=\"drum-pad\" onClick={this.clickAction} value=\"S\">S\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" className=\"clip\" id=\"S\"></audio>\n                </button>\n                <button id=\"openHH\" className=\"drum-pad\" onClick={this.clickAction} value=\"D\">D\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" className=\"clip\" id=\"D\"></audio>\n                </button>\n                <button id=\"kickAndHat\" className=\"drum-pad\" onClick={this.clickAction} value=\"Z\">Z\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" className=\"clip\" id=\"Z\"></audio>\n                </button>\n                <button id=\"kick\" className=\"drum-pad\" onClick={this.clickAction} value=\"X\">X\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" className=\"clip\" id=\"X\"></audio>\n                </button>\n                <button id=\"closedHH\" className=\"drum-pad\" onClick={this.clickAction} value=\"C\">C\n                    <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" className=\"clip\" id=\"C\"></audio>\n                </button>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}